{"ast":null,"code":"var _jsxFileName = \"/Users/leonardo/Desktop/Dev/React Udemy course/p13_adv_ReactRoute/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport const loader = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //   throw new Response(JSON.stringify({ message: 'could not fetch events.'}), {\n    //   status: 500\n    // })\n    throw json({\n      message: 'could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","message","status","$RefreshReg$"],"sources":["/Users/leonardo/Desktop/Dev/React Udemy course/p13_adv_ReactRoute/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { useLoaderData, json } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const data = useLoaderData()\n  const events = data.events\n\n  return (\n    <>\n      <EventsList events={events} />\n    </>\n  );\n}\n\nexport default EventsPage;\n\nexport const loader = async () => {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n  //   throw new Response(JSON.stringify({ message: 'could not fetch events.'}), {\n  //   status: 500\n  // })\n  throw json({message: 'could not fetch events.'}, {status: 500})\n  } else {\n    return response\n  }\n} "],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,QAAQ,kBAAkB;AAEtD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGT,aAAa,CAAC,CAAC;EAC5B,MAAMU,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACEP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC9B,CAAC;AAEP;AAACP,EAAA,CATQD,UAAU;EAAA,QACJP,aAAa;AAAA;AAAAgB,EAAA,GADnBT,UAAU;AAWnB,eAAeA,UAAU;AAEzB,OAAO,MAAMU,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAClB;IACA;IACA;IACA,MAAMnB,IAAI,CAAC;MAACoB,OAAO,EAAE;IAAyB,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EAC/D,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF,CAAC;AAAA,IAAAF,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}